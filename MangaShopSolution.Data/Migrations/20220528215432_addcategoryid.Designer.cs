// <auto-generated />
using System;
using MangaShopSolution.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaShopSolution.Data.Migrations
{
    [DbContext(typeof(MangaShopDbContext))]
    [Migration("20220528215432_addcategoryid")]
    partial class addcategoryid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MangaShopSolution.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is home page of MangaShopSolution"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of MangaShopSolution"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "This is description of MangaShopSolution"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "d3f90586-e07b-420a-b262-3d099d95091c",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6bbc08b-a672-47d6-87c9-838ca5776cd1",
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tedu.international@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toan",
                            LastName = "Bach",
                            LockoutEnabled = false,
                            NormalizedEmail = "tedu.international@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAt3Bl4SCSwc75GIiNd2+6cfpclhhFiU5Ry22A961Mg41I9Mj5IJo51BUmtXxTwuVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = "en",
                            Name = "Figure",
                            SeoAlias = "men-shirt",
                            SeoDescription = "The shirt products for men",
                            SeoTitle = "The shirt products for men"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            LanguageId = "en",
                            Name = "Clothing",
                            SeoAlias = "women-shirt",
                            SeoDescription = "The shirt products for women",
                            SeoTitle = "The shirt products for women"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "vi",
                            IsDefault = false,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en",
                            IsDefault = true,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3028),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3041),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3043),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3044),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3046),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3047),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3048),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3051),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3053),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3054),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3055),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3056),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3057),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3059),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3060),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3061),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3062),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3063),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3128),
                            FileSize = 0L,
                            ImagePath = "/images/choper.jpg",
                            IsDefault = true,
                            ProductId = 1,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3130),
                            FileSize = 0L,
                            ImagePath = "/images/kid.jpg",
                            IsDefault = true,
                            ProductId = 2,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3131),
                            FileSize = 0L,
                            ImagePath = "/images/aokiji.jpeg",
                            IsDefault = true,
                            ProductId = 3,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3132),
                            FileSize = 0L,
                            ImagePath = "/images/akainu.jpg",
                            IsDefault = true,
                            ProductId = 4,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3134),
                            FileSize = 0L,
                            ImagePath = "/images/kizaru.jpg",
                            IsDefault = true,
                            ProductId = 5,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3135),
                            FileSize = 0L,
                            ImagePath = "/images/sengoku.jpg",
                            IsDefault = true,
                            ProductId = 6,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3137),
                            FileSize = 0L,
                            ImagePath = "/images/ace.jpg",
                            IsDefault = true,
                            ProductId = 7,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3138),
                            FileSize = 0L,
                            ImagePath = "/images/nami.jpg",
                            IsDefault = true,
                            ProductId = 8,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3139),
                            FileSize = 0L,
                            ImagePath = "/images/robin.jpg",
                            IsDefault = true,
                            ProductId = 9,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3140),
                            FileSize = 0L,
                            ImagePath = "/images/luffy.jpg",
                            IsDefault = true,
                            ProductId = 10,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3141),
                            FileSize = 0L,
                            ImagePath = "/images/zoro.jpg",
                            IsDefault = true,
                            ProductId = 11,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3142),
                            FileSize = 0L,
                            ImagePath = "/images/mihawk.jpg",
                            IsDefault = true,
                            ProductId = 12,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3144),
                            FileSize = 0L,
                            ImagePath = "/images/wano shirt.png",
                            IsDefault = true,
                            ProductId = 13,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3144),
                            FileSize = 0L,
                            ImagePath = "/images/shira.jpg",
                            IsDefault = true,
                            ProductId = 14,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3145),
                            FileSize = 0L,
                            ImagePath = "/images/white shirt.png",
                            IsDefault = true,
                            ProductId = 15,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3146),
                            FileSize = 0L,
                            ImagePath = "/images/garrison regiment.jpg",
                            IsDefault = true,
                            ProductId = 16,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3147),
                            FileSize = 0L,
                            ImagePath = "/images/military police.png",
                            IsDefault = true,
                            ProductId = 17,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2022, 5, 29, 4, 54, 31, 580, DateTimeKind.Local).AddTicks(3148),
                            FileSize = 0L,
                            ImagePath = "/images/scouting legion.jpg",
                            IsDefault = true,
                            ProductId = 18,
                            SortOrder = 0
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 7
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 8
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 9
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 10
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 11
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 12
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 13
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 14
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 15
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 16
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 17
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 18
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = "en",
                            Name = "Chopper",
                            ProductId = 1,
                            SeoAlias = "chopper"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = "en",
                            Name = "Kid",
                            ProductId = 2,
                            SeoAlias = "kid"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = "en",
                            Name = "Aokiji",
                            ProductId = 3,
                            SeoAlias = "Aokiji"
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = "en",
                            Name = "Akainu",
                            ProductId = 4,
                            SeoAlias = "Akainu"
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = "en",
                            Name = "Kizaru",
                            ProductId = 5,
                            SeoAlias = "kizaru"
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = "en",
                            Name = "Sengoku",
                            ProductId = 6,
                            SeoAlias = "Sengoku"
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = "en",
                            Name = "Ace",
                            ProductId = 7,
                            SeoAlias = "Ace"
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = "en",
                            Name = "Nami",
                            ProductId = 8,
                            SeoAlias = "Nami"
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = "en",
                            Name = "Robin",
                            ProductId = 9,
                            SeoAlias = "Robin"
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = "en",
                            Name = "Luffy",
                            ProductId = 10,
                            SeoAlias = "Luffy"
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = "en",
                            Name = "Zoro",
                            ProductId = 11,
                            SeoAlias = "Zoro"
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = "en",
                            Name = "Mihawk",
                            ProductId = 12,
                            SeoAlias = "Mihawk"
                        },
                        new
                        {
                            Id = 13,
                            LanguageId = "en",
                            Name = "Wano Shirt",
                            ProductId = 13,
                            SeoAlias = "wano-shirt"
                        },
                        new
                        {
                            Id = 14,
                            LanguageId = "en",
                            Name = "Shirahoshi Shirt",
                            ProductId = 14,
                            SeoAlias = "shirahoshi-shirt"
                        },
                        new
                        {
                            Id = 15,
                            LanguageId = "en",
                            Name = "White Shirt",
                            ProductId = 15,
                            SeoAlias = "white-shirt"
                        },
                        new
                        {
                            Id = 16,
                            LanguageId = "en",
                            Name = "Garrison Regiment Hoodie",
                            ProductId = 16,
                            SeoAlias = "Garrison-Regiment-Hoodie"
                        },
                        new
                        {
                            Id = 17,
                            LanguageId = "en",
                            Name = "Military Police Hoodie",
                            ProductId = 17,
                            SeoAlias = "Military-Police-Hoodie"
                        },
                        new
                        {
                            Id = 18,
                            LanguageId = "en",
                            Name = "Scouting Legion Hoodie",
                            ProductId = 18,
                            SeoAlias = "Scouting-Legion-Hoodie"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Slides", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/1.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 1,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/2.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 2,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/3.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 3,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/4.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 4,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/5.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 5,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/6.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 6,
                            Status = 1,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaShopSolution.Data.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaShopSolution.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.ProductTranslation", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Transaction", b =>
                {
                    b.HasOne("MangaShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MangaShopSolution.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("ProductTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
